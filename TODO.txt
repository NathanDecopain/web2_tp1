0 - Initialiser les composantes du projet

    0.1 - Créer le projet Firebase

    0.2 - Créer le côté serveur avec Node.js

    0.3 - Lier le serveur avec le projet Firebase correspondant



======================================= A: BACKEND ==========================================



________________________1 - Gestion des utilisateurs

1.1 - Implémenter la création de compte utilisateur

    1.1.0 - Rechercher comment utiliser Firebase Authentication à cet effet

// Hypothèse

    1.1.1 - Schématiser la table d'utilisateurs dans la base de données à documents
	(ID, username, display_name, password[hashed], profile_picture_url 

    1.1.2 - Créer la base de données à documents dans Firebase Firestore
    
    1.1.3 - Créer la route d'API permettant l'inscription

        - Implémenter le téléchargement vers serveur, suppression et modification de 
       la photo de profil d'un utilisateur donné (Rechercher comment utiliser Firebase Storage à cet effet)
        Implémentation (hypothèse): Accepter un multipart/form-data pour les infos utlisateur et la photo de profil

    1.1.4 - Insérer un enregistrement d'utilisateur avec Postman pour tester

1.2 - Implémenter la connexion (Authentication) en tant qu'utilisateur inscrit
???

// Hypothèse: Obtenir un Token et l'utliser pour toutes les routes protégées

1.3 - Implémenter la modification de profil utilisateur

    1.3.1 - Vérifier que les champs modifiables sont bien inclus dans la table Utilisateurs
    
    1.3.2 - Créer la route d'API permettant la modification du profil de l'utilisateur connecté (/update-profile)
    
    1.3.3 - Tester la fonctionnalité de modification de compte en modifiant un compte utlisateur existant à l'aide d'un requête Postman





_________________________2 - Implémenter le système de chat en temps réel

    2.1 - Schématiser la table de salons de conversations entre utilisateurs
        Implémentation hypothétique: 
            - Une table consignant l'appartenance d'un utilisateur donné à un salon donné, ainsi que 
                    la date d'introduction (But: Rendre visibles seuls les messages succédant 
                    l'introduction de l'utilisateur à un salon de groupe donné). (ID salon, ID utilisateur, date d'inscription, 
		    date de dernière consultation, 
                    permissions (ajout d'utilisateur, éviction d'utilisateur, suppression de la salle))
            
            - Une table contenant les métadonnées des salons (ID du salon, nom, date de création)

            - Une table contenant les messages (ID du message, salon d'appartenance, utilisateur destinateur, date d'envoi, contenu)

            ?x (peut être remplacée par un registre de la date de dernière consultation d'un salon donné) - Une table contenant les statuts de réception des messages (ID message, ID destinataire, date de consultation)
    
    2.2 - Créer les tables de salons de conversation dans la base de données à document Firestore
    
    2.3 - Créer les routes d'API du système de chat en temps réel

	2.3.0 - Créer la route de création de salon
	
	2.3.1 - Créer la route d'ajout d'un utilisateur donné à un salon
        
        2.3.2 - Créer la route d'éviction d'un utilisateur donné d'un salon
	
	2.3.3 - Créer la route de suppression d'un salon

        2.3.4 - Créer la route d'envoi de message dans un salon donné (POST)

        2.3.5 - Créer la route de consultation des messages (GET)

            - Chaque requête doit mettre à jour la date de dernière consultation du salon de l'utilisateur correspondant
	
	2.3.6 - Créer la route de suppression d'un message donné.


FOR FUN: Implémenter un système de rôles pour la gestion des permissions?
FOR FUN: Implémenter des statuts?
FOR FUN: Implémenter une fonctionnalité de masquage de sa consultation de message?

